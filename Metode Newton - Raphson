# Menyelesaikan Persamaan Non Linear x^3 + x^2 - 3x - 3 dengan Metode Newton-Raphson

# Mengimport library yang digunakan
import matplotlib.pyplot as plt
import numpy as np

# Mendefinisikan fungsi dan turunannya
def f(x):
    return x**3 + x**2 - 3*x - 3

def f_prime(x):
    return 3*x**2 + 2*x - 3

# Metode Newton-Raphson
def newton_raphson(x0, tol=1e-6, max_iter=100):
    print("Iterasi\t     x\t\t     f(x)")
    nilai_x = []
    
    for i in range(max_iter):
        fx = f(x0)
        fpx = f_prime(x0)
        
        if fpx == 0:
            print("Turunan nol, metode berhenti.")
            break
        
        x1 = x0 - fx / fpx
        print(f"{i+1:>3}\t{x0:.8f}\t{fx:.8f}")
        nilai_x.append(x1)
        
        if abs(x1 - x0) < tol:
            print(f"\nAkar ditemukan pada x = {x1:.12f}")
            return x1, nilai_x
        
        x0 = x1

    print("\nMetode tidak konvergen.")
    return None, nilai_x

# Menjalankan metode dengan tebakan awal
akar, nilai_x = newton_raphson(3)

# Visualisasi hasil iterasi Newton-Raphson
x_vals = np.linspace(0, 4, 400)
y_vals = f(x_vals)

plt.figure(figsize=(10, 6))
plt.plot(x_vals, y_vals, label='f(x)', color='blue')
plt.axhline(0, color='gray', linestyle='--')
plt.plot(nilai_x, [f(x) for x in nilai_x], 'ro', label='Iterasi Newton')
plt.title('Visualisasi Proses Newton-Raphson')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

# Ringkasan akhir
if akar is not None:
    print("\n=== Ringkasan Akhir ===")
    print(f"Akar ditemukan pada x = {akar:.12f}")
    print(f"f(x) = {f(akar):.12e}")
    print(f"Jumlah iterasi = {len(nilai_x)}")
